// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"compus_blog/basic/internal/events/article"
	"compus_blog/basic/internal/repository"
	"compus_blog/basic/internal/repository/cache"
	"compus_blog/basic/internal/repository/dao"
	"compus_blog/basic/internal/service"
	"compus_blog/basic/internal/web"
	"compus_blog/basic/internal/web/jwt"
	"compus_blog/basic/ioc"
	"github.com/google/wire"
)

// Injectors from wire.go:

func InitWebServer() *App {
	cmdable := ioc.InitRedis()
	handler := jwt.NewRedisJWTHandler(cmdable)
	loggerV1 := ioc.InitLogger()
	v := ioc.InitGinMiddleWares(cmdable, handler, loggerV1)
	db := ioc.InitDB()
	userDAO := dao.NewUserDAO(db)
	userCache := cache.NewUserCache(cmdable)
	userRepository := repository.NewUserRepository(userDAO, userCache, loggerV1)
	userService := service.NewUserService(userRepository)
	codeCache := cache.NewCodeCache(cmdable)
	codeRepository := repository.NewCodeRepository(codeCache)
	smsService := ioc.InitSMSService(cmdable)
	codeService := service.NewCodeService(codeRepository, smsService)
	userHandler := web.NewUserHandler(userService, codeService, handler)
	articleDAO := dao.NewArticleDAOStruct(db)
	articleCache := cache.NewArticleCacheStruct(cmdable)
	articleRepository := repository.NewArticleRepository(articleDAO, articleCache, userRepository, loggerV1)
	client := ioc.InitKafka()
	syncProducer := ioc.InitSyncProducer(client)
	producer := article.NewKafkaProducer(syncProducer, loggerV1)
	articleService := service.NewArticleServiceStruct(articleRepository, producer, loggerV1)
	clientv3Client := ioc.InitEtcd()
	interactiveServiceClient := ioc.InitIntrClientV1(clientv3Client)
	articleHandler := web.NewArticleHandler(articleService, loggerV1, interactiveServiceClient)
	engine := ioc.InitWebServer(v, userHandler, articleHandler)
	v2 := ioc.NewConsumers()
	rankingRedisCache := cache.NewRankingRedisCache(cmdable)
	rankingLocalCache := cache.NewRankingLocalCache()
	rankingRepository := repository.NewRankingRepository(rankingRedisCache, rankingLocalCache)
	rankingService := service.NewBatchRankingService(articleService, interactiveServiceClient, rankingRepository)
	rlockClient := ioc.InitRLockClient(cmdable)
	rankingJob := ioc.InitRankingJob(rankingService, rlockClient, loggerV1)
	cron := ioc.InitJobs(loggerV1, rankingJob)
	app := &App{
		server:    engine,
		consumers: v2,
		cron:      cron,
	}
	return app
}

// wire.go:

var thirdPartSet = wire.NewSet(ioc.InitDB, ioc.InitRedis, ioc.InitEtcd, ioc.InitLogger, ioc.InitKafka, ioc.InitSyncProducer)

var rankingServiceSet = wire.NewSet(repository.NewRankingRepository, cache.NewRankingRedisCache, cache.NewRankingLocalCache, service.NewBatchRankingService)
